// Code generated by mockery v2.50.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/andy82115/go-hexagonal-sample-exam/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// SecretRepository is an autogenerated mock type for the SecretRepository type
type SecretRepository struct {
	mock.Mock
}

// GetTokenSecret provides a mock function with given fields: param
func (_m *SecretRepository) GetTokenSecret(param domain.SecretGetParam) (domain.SecretGetResponse, error) {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenSecret")
	}

	var r0 domain.SecretGetResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.SecretGetParam) (domain.SecretGetResponse, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(domain.SecretGetParam) domain.SecretGetResponse); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(domain.SecretGetResponse)
	}

	if rf, ok := ret.Get(1).(func(domain.SecretGetParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTokenSecret provides a mock function with given fields: param
func (_m *SecretRepository) UpdateTokenSecret(param domain.SecretUpdateParam) (domain.SecretUpdateResponse, error) {
	ret := _m.Called(param)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokenSecret")
	}

	var r0 domain.SecretUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.SecretUpdateParam) (domain.SecretUpdateResponse, error)); ok {
		return rf(param)
	}
	if rf, ok := ret.Get(0).(func(domain.SecretUpdateParam) domain.SecretUpdateResponse); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(domain.SecretUpdateResponse)
	}

	if rf, ok := ret.Get(1).(func(domain.SecretUpdateParam) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecretRepository creates a new instance of SecretRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretRepository {
	mock := &SecretRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
